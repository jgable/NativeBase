{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","props","componentDidMount","setState","defaultDate","Date","state","modalVisible","chosenDate","undefined","date","onDateChange","Platform","OS","openAndroidDatePicker","DatePickerAndroid","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","newDate","action","year","month","day","code","message","console","warn","variables","context","theme","variable","showDatePicker","bind","padding","color","datePickerTextColor","textStyle","placeHolderTextStyle","formatChosenDate","placeHolderText","animationType","modalTransparent","backgroundColor","datePickerBg","flex","setDate","locale","timeZoneOffsetInMinutes","getDate","getMonth","getFullYear","join","React","Component"],"mappings":"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","file":"DatePicker.js","sourcesContent":["import React from \"react\";\nimport {\n  Modal,\n  View,\n  Platform,\n  DatePickerIOS,\n  DatePickerAndroid\n} from \"react-native\";\nimport { Text } from \"native-base\";\nimport variable from \"../theme/variables/platform\";\n\nexport class DatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      defaultDate: new Date(),\n      chosenDate: undefined\n    };\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      defaultDate: this.props.defaultDate ? this.props.defaultDate : new Date()\n    });\n  };\n\n  setDate(date) {\n    this.setState({ chosenDate: new Date(date) });\n    if (this.props.onDateChange) {\n      this.props.onDateChange(date);\n    }\n  }\n\n  showDatePicker() {\n    if (Platform.OS === \"android\") {\n      this.openAndroidDatePicker();\n    } else {\n      this.setState({ modalVisible: true });\n    }\n  }\n\n  async openAndroidDatePicker() {\n    try {\n      const newDate = await DatePickerAndroid.open({\n        date: this.state.chosenDate\n          ? this.state.chosenDate\n          : this.state.defaultDate,\n        minDate: this.props.minimumDate,\n        maxDate: this.props.maximumDate,\n        mode: this.props.androidMode\n      });\n      const { action, year, month, day } = newDate;\n      if (action === \"dateSetAction\") {\n        this.setState({ chosenDate: new Date(year, month, day) });\n      }\n    } catch ({ code, message }) {\n      console.warn(\"Cannot open date picker\", message);\n    }\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    return (\n      <View>\n        <View>\n          <Text\n            onPress={this.showDatePicker.bind(this)}\n            style={[\n              { padding: 10, color: variables.datePickerTextColor },\n              this.state.chosenDate ? this.props.textStyle : this.props.placeHolderTextStyle\n            ]}\n          >\n            {this.state.chosenDate\n              ? this.formatChosenDate(this.state.chosenDate)\n              : this.props.placeHolderText\n                ? this.props.placeHolderText\n                : \"Select Date\"}\n          </Text>\n          <View>\n            <Modal\n              animationType={this.props.animationType}\n              transparent={this.props.modalTransparent} //from api\n              visible={this.state.modalVisible}\n              onRequestClose={() => {}}\n            >\n              <Text\n                onPress={() => this.setState({ modalVisible: false })}\n                style={{ backgroundColor: variables.datePickerBg, flex: 1 }}\n              />\n              <DatePickerIOS\n                date={\n                  this.state.chosenDate\n                    ? this.state.chosenDate\n                    : this.state.defaultDate\n                }\n                onDateChange={this.setDate.bind(this)}\n                minimumDate={this.props.minimumDate}\n                maximumDate={this.props.maximumDate}\n                mode=\"date\"\n                locale={this.props.locale}\n                timeZoneOffsetInMinutes={this.props.timeZoneOffsetInMinutes}\n              />\n            </Modal>\n          </View>\n        </View>\n      </View>\n    );\n  }\n\n  formatChosenDate(date) {\n    if (this.props.formatChosenDate) {\n      return this.props.formatChosenDate(date);\n    }\n\n    return [\n      date.getDate(),\n      date.getMonth() + 1,\n      date.getFullYear(),\n    ].join('/');\n  }\n}\n"]}